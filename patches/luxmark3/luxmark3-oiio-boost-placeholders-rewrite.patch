commit 6c42497df567a92e8b804cc690d4f01a2af745f8
Author: Thomas Debesse <dev@illwieckz.net>
Date:   Fri Oct 21 18:18:02 2022 +0200

    patch: luxmark3/luxmark3-oiio-boost-placeholders-rewrite.patch

diff --git a/src/libOpenImageIO/color_ocio.cpp b/src/libOpenImageIO/color_ocio.cpp
index 0b70d89e..bc9bdc57 100644
--- a/src/libOpenImageIO/color_ocio.cpp
+++ b/src/libOpenImageIO/color_ocio.cpp
@@ -748,7 +748,7 @@ colorconvert_impl (ImageBuf &R, const ImageBuf &A,
         ImageBufAlgo::parallel_image (
             boost::bind(colorconvert_impl<Rtype,Atype>,
                         boost::ref(R), boost::cref(A), processor, unpremult,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo.cpp b/src/libOpenImageIO/imagebufalgo.cpp
index b0a3056e..94967299 100644
--- a/src/libOpenImageIO/imagebufalgo.cpp
+++ b/src/libOpenImageIO/imagebufalgo.cpp
@@ -290,7 +290,7 @@ convolve_ (ImageBuf &dst, const ImageBuf &src, const ImageBuf &kernel,
         ImageBufAlgo::parallel_image (
             boost::bind(convolve_<DSTTYPE,SRCTYPE>, boost::ref(dst),
                         boost::cref(src), boost::cref(kernel), normalize,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -439,7 +439,7 @@ threshold_to_zero (ImageBuf &dst, float threshold,
         // Lots of pixels and request for multi threads? Parallelize.
         ImageBufAlgo::parallel_image (
             boost::bind(threshold_to_zero, boost::ref(dst), threshold,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -519,7 +519,7 @@ median_filter_impl (ImageBuf &R, const ImageBuf &A, int width, int height,
         ImageBufAlgo::parallel_image (
             boost::bind(median_filter_impl<Rtype,Atype>,
                         boost::ref(R), boost::cref(A),
-                        width, height, _1 /*roi*/, 1 /*nthreads*/),
+                        width, height, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -598,7 +598,7 @@ hfft_ (ImageBuf &dst, const ImageBuf &src, bool inverse, bool unitary,
         ImageBufAlgo::parallel_image (
             boost::bind (hfft_, boost::ref(dst), boost::cref(src),
                          inverse, unitary,
-                         _1 /*roi*/, 1 /*nthreads*/),
+                         boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -757,7 +757,7 @@ polar_to_complex_impl (ImageBuf &R, const ImageBuf &A, ROI roi, int nthreads)
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(polar_to_complex_impl<Rtype,Atype>, boost::ref(R), boost::cref(A),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -784,7 +784,7 @@ complex_to_polar_impl (ImageBuf &R, const ImageBuf &A, ROI roi, int nthreads)
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(complex_to_polar_impl<Rtype,Atype>, boost::ref(R), boost::cref(A),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -863,7 +863,7 @@ divide_by_alpha (ImageBuf &dst, ROI roi, int nthreads)
         // Lots of pixels and request for multi threads? Parallelize.
         ImageBufAlgo::parallel_image (
             boost::bind(divide_by_alpha, boost::ref(dst),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo_compare.cpp b/src/libOpenImageIO/imagebufalgo_compare.cpp
index c69ca94c..09dfeb2e 100644
--- a/src/libOpenImageIO/imagebufalgo_compare.cpp
+++ b/src/libOpenImageIO/imagebufalgo_compare.cpp
@@ -509,7 +509,7 @@ color_count_ (const ImageBuf &src, atomic_ll *count,
         ImageBufAlgo::parallel_image (
             boost::bind(color_count_<T>, boost::ref(src),
                         count, ncolors, color, eps,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -581,7 +581,7 @@ color_range_check_ (const ImageBuf &src, atomic_ll *lowcount,
         ImageBufAlgo::parallel_image (
             boost::bind(color_range_check_<T>, boost::ref(src),
                         lowcount, highcount, inrangecount, low, high,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo_copy.cpp b/src/libOpenImageIO/imagebufalgo_copy.cpp
index 0e4df79c..d9dbf0c6 100644
--- a/src/libOpenImageIO/imagebufalgo_copy.cpp
+++ b/src/libOpenImageIO/imagebufalgo_copy.cpp
@@ -115,7 +115,7 @@ crop_ (ImageBuf &dst, const ImageBuf &src,
         // Lots of pixels and request for multi threads? Parallelize.
         ImageBufAlgo::parallel_image (
             boost::bind(crop_<D,S>, boost::ref(dst), boost::cref(src),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -532,7 +532,7 @@ transpose_ (ImageBuf &dst, const ImageBuf &src,
         ImageBufAlgo::parallel_image (
             boost::bind(transpose_<DSTTYPE,SRCTYPE>,
                         boost::ref(dst), boost::cref(src),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -589,7 +589,7 @@ circular_shift_ (ImageBuf &dst, const ImageBuf &src,
             boost::bind(circular_shift_<DSTTYPE,SRCTYPE>,
                         boost::ref(dst), boost::cref(src),
                         xshift, yshift, zshift,
-                        dstroi, _1 /*roi*/, 1 /*nthreads*/),
+                        dstroi, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -803,7 +803,7 @@ channel_append_impl (ImageBuf &dst, const ImageBuf &A, const ImageBuf &B,
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind (channel_append_impl<ABtype>, boost::ref(dst),
-                         boost::cref(A), boost::cref(B), _1, 1),
+                         boost::cref(A), boost::cref(B), boost::placeholders::_1, 1),
             roi, nthreads);
     }
     return true;
diff --git a/src/libOpenImageIO/imagebufalgo_deep.cpp b/src/libOpenImageIO/imagebufalgo_deep.cpp
index 082a4737..eb69489d 100644
--- a/src/libOpenImageIO/imagebufalgo_deep.cpp
+++ b/src/libOpenImageIO/imagebufalgo_deep.cpp
@@ -89,7 +89,7 @@ flatten_ (ImageBuf &dst, const ImageBuf &src,
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(flatten_<DSTTYPE>, boost::ref(dst), boost::cref(src),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo_draw.cpp b/src/libOpenImageIO/imagebufalgo_draw.cpp
index f50e2ffd..25c1c046 100644
--- a/src/libOpenImageIO/imagebufalgo_draw.cpp
+++ b/src/libOpenImageIO/imagebufalgo_draw.cpp
@@ -63,7 +63,7 @@ fill_ (ImageBuf &dst, const float *values, ROI roi=ROI(), int nthreads=1)
         // Lots of pixels and request for multi threads? Parallelize.
         ImageBufAlgo::parallel_image (
             boost::bind(fill_<T>, boost::ref(dst), values,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -85,7 +85,7 @@ fill_ (ImageBuf &dst, const float *top, const float *bottom,
         // Lots of pixels and request for multi threads? Parallelize.
         ImageBufAlgo::parallel_image (
             boost::bind(fill_<T>, boost::ref(dst), top, bottom,
-                        origroi, _1 /*roi*/, 1 /*nthreads*/),
+                        origroi, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -112,7 +112,7 @@ fill_ (ImageBuf &dst, const float *topleft, const float *topright,
         ImageBufAlgo::parallel_image (
             boost::bind(fill_<T>, boost::ref(dst), topleft, topright,
                         bottomleft, bottomright,
-                        origroi, _1 /*roi*/, 1 /*nthreads*/),
+                        origroi, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -207,7 +207,7 @@ checker_ (ImageBuf &dst, Dim3 size,
         ImageBufAlgo::parallel_image (
             boost::bind(checker_<T>, boost::ref(dst),
                         size, color1, color2, offset,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -290,7 +290,7 @@ noise_uniform_ (ImageBuf &dst, float min, float max, bool mono,
         ImageBufAlgo::parallel_image (
             boost::bind(noise_uniform_<T>, boost::ref(dst),
                         min, max, mono, seed,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -320,7 +320,7 @@ noise_gaussian_ (ImageBuf &dst, float mean, float stddev, bool mono,
         ImageBufAlgo::parallel_image (
             boost::bind(noise_gaussian_<T>, boost::ref(dst),
                         mean, stddev, mono, seed,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -350,7 +350,7 @@ noise_salt_ (ImageBuf &dst, float saltval, float saltportion, bool mono,
         ImageBufAlgo::parallel_image (
             boost::bind(noise_salt_<T>, boost::ref(dst),
                         saltval, saltportion, mono, seed,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo_pixelmath.cpp b/src/libOpenImageIO/imagebufalgo_pixelmath.cpp
index 27ea26a9..dd8ca42b 100644
--- a/src/libOpenImageIO/imagebufalgo_pixelmath.cpp
+++ b/src/libOpenImageIO/imagebufalgo_pixelmath.cpp
@@ -62,7 +62,7 @@ clamp_ (ImageBuf &dst, const ImageBuf &src,
         ImageBufAlgo::parallel_image (
             boost::bind(clamp_<D,S>, boost::ref(dst), boost::cref(src),
                         min, max, clampalpha01,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -130,7 +130,7 @@ add_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B,
         ImageBufAlgo::parallel_image (
             boost::bind(add_impl<Rtype,Atype,Btype>,
                         boost::ref(R), boost::cref(A), boost::cref(B),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -157,7 +157,7 @@ add_impl (ImageBuf &R, const ImageBuf &A, const float *b,
         ImageBufAlgo::parallel_image (
             boost::bind(add_impl<Rtype,Atype>,
                         boost::ref(R), boost::cref(A), b,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -231,7 +231,7 @@ sub_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B,
         ImageBufAlgo::parallel_image (
             boost::bind(sub_impl<Rtype,Atype,Btype>,
                         boost::ref(R), boost::cref(A), boost::cref(B),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -309,7 +309,7 @@ absdiff_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B,
         ImageBufAlgo::parallel_image (
             boost::bind(absdiff_impl<Rtype,Atype,Btype>,
                         boost::ref(R), boost::cref(A), boost::cref(B),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -335,7 +335,7 @@ absdiff_impl (ImageBuf &R, const ImageBuf &A, const float *b,
         ImageBufAlgo::parallel_image (
             boost::bind(absdiff_impl<Rtype,Atype>,
                         boost::ref(R), boost::cref(A), b,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -419,7 +419,7 @@ mul_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B,
         ImageBufAlgo::parallel_image (
             boost::bind(mul_impl<Rtype,Atype,Btype>,
                         boost::ref(R), boost::cref(A), boost::cref(B),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -460,7 +460,7 @@ mul_impl (ImageBuf &R, const ImageBuf &A, const float *b,
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(mul_impl<Rtype,Atype>, boost::ref(R), boost::cref(A), b,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -516,7 +516,7 @@ div_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B,
         ImageBufAlgo::parallel_image (
             boost::bind(div_impl<Rtype,Atype,Btype>,
                         boost::ref(R), boost::cref(A), boost::cref(B),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -597,7 +597,7 @@ mad_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B, const ImageBuf &C,
         ImageBufAlgo::parallel_image (
             boost::bind(mad_impl<Rtype,ABCtype>, boost::ref(R),
                         boost::cref(A), boost::cref(B), boost::cref(C),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -625,7 +625,7 @@ mad_implf (ImageBuf &R, const ImageBuf &A, const float *b, const float *c,
         ImageBufAlgo::parallel_image (
             boost::bind(mad_implf<Rtype,Atype>, boost::ref(R),
                         boost::cref(A), b, c,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -740,7 +740,7 @@ pow_impl (ImageBuf &R, const ImageBuf &A, const float *b,
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(pow_impl<Rtype,Atype>, boost::ref(R), boost::cref(A), b,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -796,7 +796,7 @@ channel_sum_ (ImageBuf &dst, const ImageBuf &src,
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(channel_sum_<D,S>, boost::ref(dst), boost::cref(src),
-                        weights, _1 /*roi*/, 1 /*nthreads*/),
+                        weights, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -899,7 +899,7 @@ rangecompress_ (ImageBuf &R, const ImageBuf &A,
         ImageBufAlgo::parallel_image (
             boost::bind(rangecompress_<Rtype,Atype>, boost::ref(R),
                         boost::cref(A), useluma,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -969,7 +969,7 @@ rangeexpand_ (ImageBuf &R, const ImageBuf &A,
         ImageBufAlgo::parallel_image (
             boost::bind(rangeexpand_<Rtype,Atype>, boost::ref(R), 
                         boost::cref(A), useluma,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -1067,7 +1067,7 @@ unpremult_ (ImageBuf &R, const ImageBuf &A, ROI roi, int nthreads)
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(unpremult_<Rtype,Atype>, boost::ref(R), boost::cref(A),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -1133,7 +1133,7 @@ premult_ (ImageBuf &R, const ImageBuf &A, ROI roi, int nthreads)
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (
             boost::bind(premult_<Rtype,Atype>, boost::ref(R), boost::cref(A),
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -1202,7 +1202,7 @@ bool fixNonFinite_ (ImageBuf &dst, ImageBufAlgo::NonFiniteFixMode mode,
         // Lots of pixels and request for multi threads? Parallelize.
         ImageBufAlgo::parallel_image (
             boost::bind(fixNonFinite_<T>, boost::ref(dst), mode, pixelsFixed,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -1366,7 +1366,7 @@ over_impl (ImageBuf &R, const ImageBuf &A, const ImageBuf &B,
         ImageBufAlgo::parallel_image (
             boost::bind(over_impl<Rtype,Atype,Btype>,
                         boost::ref(R), boost::cref(A), boost::cref(B),
-                        zcomp, z_zeroisinf, _1 /*roi*/, 1 /*nthreads*/),
+                        zcomp, z_zeroisinf, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo_xform.cpp b/src/libOpenImageIO/imagebufalgo_xform.cpp
index 11ac1376..a60c9f70 100644
--- a/src/libOpenImageIO/imagebufalgo_xform.cpp
+++ b/src/libOpenImageIO/imagebufalgo_xform.cpp
@@ -192,7 +192,7 @@ resize_ (ImageBuf &dst, const ImageBuf &src,
         ImageBufAlgo::parallel_image (
             boost::bind(resize_<DSTTYPE,SRCTYPE>, boost::ref(dst),
                         boost::cref(src), filter,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -466,7 +466,7 @@ resample_ (ImageBuf &dst, const ImageBuf &src, bool interpolate,
         ImageBufAlgo::parallel_image (
             boost::bind(resample_<DSTTYPE,SRCTYPE>, boost::ref(dst),
                         boost::cref(src), interpolate,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -553,7 +553,7 @@ affine_resample_ (ImageBuf &dst, const ImageBuf &src, const Imath::M33f &Minv,
         ImageBufAlgo::parallel_image (
             boost::bind(affine_resample_<DSTTYPE,SRCTYPE>,
                         boost::ref(dst), boost::cref(src), Minv,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -585,7 +585,7 @@ warp_ (ImageBuf &dst, const ImageBuf &src, const Imath::M33f &M,
         ImageBufAlgo::parallel_image (
             boost::bind(warp_<DSTTYPE,SRCTYPE>,
                         boost::ref(dst), boost::cref(src), M,
-                        filter, wrap, _1 /*roi*/, 1 /*nthreads*/),
+                        filter, wrap, boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/imagebufalgo_yee.cpp b/src/libOpenImageIO/imagebufalgo_yee.cpp
index 8b11907b..411bf7c3 100644
--- a/src/libOpenImageIO/imagebufalgo_yee.cpp
+++ b/src/libOpenImageIO/imagebufalgo_yee.cpp
@@ -121,7 +121,7 @@ AdobeRGBToXYZ (ImageBuf &A, ROI roi, int nthreads)
     if (nthreads != 1 && roi.npixels() >= 1000) {
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (boost::bind(AdobeRGBToXYZ, boost::ref(A),
-                                                  _1 /*roi*/, 1 /*nthreads*/),
+                                                  boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
                                       roi, nthreads);
         return true;
     }
@@ -172,7 +172,7 @@ XYZToLAB (ImageBuf &A, ROI roi, int nthreads)
     if (nthreads != 1 && roi.npixels() >= 1000) {
         // Possible multiple thread case -- recurse via parallel_image
         ImageBufAlgo::parallel_image (boost::bind(XYZToLAB, boost::ref(A),
-                                                  _1 /*roi*/, 1 /*nthreads*/),
+                                                  boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
                                       roi, nthreads);
         return true;
     }
diff --git a/src/libOpenImageIO/maketexture.cpp b/src/libOpenImageIO/maketexture.cpp
index 43318d61..bbed9617 100644
--- a/src/libOpenImageIO/maketexture.cpp
+++ b/src/libOpenImageIO/maketexture.cpp
@@ -437,7 +437,7 @@ lightprobe_to_envlatl (ImageBuf &dst, const ImageBuf &src, bool y_is_up,
         ImageBufAlgo::parallel_image (
             boost::bind(lightprobe_to_envlatl, boost::ref(dst),
                         boost::cref(src), y_is_up,
-                        _1 /*roi*/, 1 /*nthreads*/),
+                        boost::placeholders::_1 /*roi*/, 1 /*nthreads*/),
             roi, nthreads);
         return true;
     }
@@ -690,7 +690,7 @@ write_mipmap (ImageBufAlgo::MakeTextureMode mode,
                                img->yend(), img->zbegin(), img->zend());
 
                 if (filtername == "box" && !orig_was_overscan && sharpen <= 0.0f) {
-                    ImageBufAlgo::parallel_image (boost::bind(resize_block, boost::ref(*small), boost::cref(*img), _1, envlatlmode, allow_shift),
+                    ImageBufAlgo::parallel_image (boost::bind(resize_block, boost::ref(*small), boost::cref(*img), boost::placeholders::_1, envlatlmode, allow_shift),
                                                   OIIO::get_roi(small->spec()));
                 } else {
                     Filter2D *filter = setup_filter (small->spec(), img->spec(), filtername);
@@ -1214,7 +1214,7 @@ make_texture_impl (ImageBufAlgo::MakeTextureMode mode,
                      srcspec.format.basetype == TypeDesc::HALF ||
                      srcspec.format.basetype == TypeDesc::DOUBLE)) {
         int found_nonfinite = 0;
-        ImageBufAlgo::parallel_image (boost::bind(check_nan_block, boost::ref(*src), _1, boost::ref(found_nonfinite)),
+        ImageBufAlgo::parallel_image (boost::bind(check_nan_block, boost::ref(*src), boost::placeholders::_1, boost::ref(found_nonfinite)),
                                       OIIO::get_roi(srcspec));
         if (found_nonfinite) {
             if (found_nonfinite > 3)
@@ -1349,7 +1349,7 @@ make_texture_impl (ImageBufAlgo::MakeTextureMode mode,
     } else  if (! do_resize) {
         // Need format conversion, but no resize -- just copy the pixels
         toplevel.reset (new ImageBuf (dstspec));
-        ImageBufAlgo::parallel_image (boost::bind(copy_block,boost::ref(*toplevel),boost::cref(*src),_1),
+        ImageBufAlgo::parallel_image (boost::bind(copy_block,boost::ref(*toplevel),boost::cref(*src),boost::placeholders::_1),
                                       OIIO::get_roi(dstspec));
     } else {
         // Resize
@@ -1362,7 +1362,7 @@ make_texture_impl (ImageBufAlgo::MakeTextureMode mode,
         toplevel.reset (new ImageBuf (dstspec));
         if ((resize_filter == "box" || resize_filter == "triangle")
             && !orig_was_overscan) {
-            ImageBufAlgo::parallel_image (boost::bind(resize_block, boost::ref(*toplevel), boost::cref(*src), _1, envlatlmode, allow_shift),
+            ImageBufAlgo::parallel_image (boost::bind(resize_block, boost::ref(*toplevel), boost::cref(*src), boost::placeholders::_1, envlatlmode, allow_shift),
                                           OIIO::get_roi(dstspec));
         } else {
             Filter2D *filter = setup_filter (toplevel->spec(), src->spec(), resize_filter);
diff --git a/src/psd.imageio/psdinput.cpp b/src/psd.imageio/psdinput.cpp
index 3691244e..ca0b48a5 100644
--- a/src/psd.imageio/psdinput.cpp
+++ b/src/psd.imageio/psdinput.cpp
@@ -455,7 +455,7 @@ private:
 // 1) Add ADD_LOADER(<ResourceID>) below
 // 2) Add a method in PSDInput:
 //    bool load_resource_<ResourceID> (uint32_t length);
-#define ADD_LOADER(id) {id, boost::bind (&PSDInput::load_resource_##id, _1, _2)}
+#define ADD_LOADER(id) {id, boost::bind (&PSDInput::load_resource_##id, boost::placeholders::_1, _2)}
 const PSDInput::ResourceLoader PSDInput::resource_loaders[] =
 {
     ADD_LOADER(1005),
diff --git a/src/testtex/testtex.cpp b/src/testtex/testtex.cpp
index 6a7cf9bb..fab1711e 100644
--- a/src/testtex/testtex.cpp
+++ b/src/testtex/testtex.cpp
@@ -569,7 +569,7 @@ test_plain_texture (Mapping2D mapping)
 
         ImageBufAlgo::parallel_image (boost::bind(plain_tex_region, boost::ref(image), filename, mapping,
                                                   test_derivs ? &image_ds : NULL,
-                                                  test_derivs ? &image_dt : NULL, _1),
+                                                  test_derivs ? &image_dt : NULL, boost::placeholders::_1),
                                       get_roi(image.spec()), nthreads);
 
         if (resetstats) {
@@ -649,7 +649,7 @@ test_texture3d (ustring filename, Mapping3D mapping)
         if (iter && filenames.size() > 1)
             filename = filenames[1];
 
-        ImageBufAlgo::parallel_image (boost::bind(tex3d_region, boost::ref(image), filename, mapping, _1),
+        ImageBufAlgo::parallel_image (boost::bind(tex3d_region, boost::ref(image), filename, mapping, boost::placeholders::_1),
                                       get_roi(image.spec()), nthreads);
     }
     
