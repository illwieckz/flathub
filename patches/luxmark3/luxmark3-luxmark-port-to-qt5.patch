commit cc6a000cb7f65356a1a41cd8a96664cabb16c306
Author: Thomas Debesse <dev@illwieckz.net>
Date:   Fri Oct 21 18:22:16 2022 +0200

    patch: luxmark3/luxmark3-luxmark-port-to-qt5.patch

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e9fb5ba..0e8bad2 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -22,14 +22,7 @@
 set(LUXMARK_VERSION_MAJOR 3)
 set(LUXMARK_VERSION_MINOR 1)
 
-FIND_PACKAGE(Qt4 4.6.0 COMPONENTS QtCore QtGui QtNetwork QtMain)
-IF(QT4_FOUND)
-  include(${QT_USE_FILE})
-  include_directories(${QT_INCLUDES} ${QT_QTNETWORK_INCLUDE_DIR})
-ELSE(QT4_FOUND)
-  message(STATUS "Is env variable QTDIR set correctly? Currently: $ENV{QTDIR}")
-ENDIF(QT4_FOUND)
-
+find_package(Qt5 COMPONENTS Core Gui Network Widgets REQUIRED)
 
 # Configure a header file to pass some of the CMake settings
 # to the source code
@@ -45,7 +38,6 @@ configure_file(
 #############################################################################
 
 set(QT_USE_QTOPENGL true)
-include(${QT_USE_FILE})
 
 set(LUXMARK_SRCS
 	aboutdialog.cpp
@@ -78,12 +70,12 @@ set(LUXMARK_RCS
 	resources.qrc
 	)
 
-QT4_ADD_RESOURCES(LUXMARK_RC_SRCS ${LUXMARK_RCS})
-QT4_WRAP_UI(LUXMARK_UI_HDRS ${LUXMARK_UIS})
+QT5_ADD_RESOURCES(LUXMARK_RC_SRCS ${LUXMARK_RCS})
+QT5_WRAP_UI(LUXMARK_UI_HDRS ${LUXMARK_UIS})
 # The next OPTIONS directive prevent the moc to include some boost files
 # because qt 4 moc parser fails on some complexes macro definiton in boost >=
 # 1.53.
-QT4_WRAP_CPP(LUXMARK_MOC_SRCS ${LUXMARK_MOC} OPTIONS -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
+QT5_WRAP_CPP(LUXMARK_MOC_SRCS ${LUXMARK_MOC} OPTIONS -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED -DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
 
 include_directories(".")
 INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
@@ -136,6 +128,8 @@ IF(APPLE)
 			COMMAND cp ${OSX_DEPENDENCY_ROOT}/lib/embree2/libembree.2.4.0.dylib ${CMAKE_BINARY_DIR}/bin/$(CONFIGURATION)/LuxMark.app/Contents/MacOS # bundle embree
 			COMMAND cp -R ${CMAKE_SOURCE_DIR}/scenes ${CMAKE_BINARY_DIR}/bin/$(CONFIGURATION)/LuxMark.app/Contents
 )
+	target_link_libraries(LuxMark Qt5::Core Qt5::Gui Qt5::Network Qt5::Widgets)
+	target_link_libraries(LuxMark Qt5::Core Qt5::Gui Qt5::Network Qt5::Widgets)
 ELSE(APPLE)
 	ADD_EXECUTABLE(luxmark ${LUXMARK_SRCS})
 
@@ -152,4 +146,6 @@ ELSE(APPLE)
 		set_target_properties(luxmark PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")
 		set_target_properties(luxmark PROPERTIES LINK_FLAGS_MINSIZEREL "/SUBSYSTEM:WINDOWS")
 	endif(WIN32)
+
+	target_link_libraries(luxmark Qt5::Core Qt5::Gui Qt5::Network Qt5::Widgets)
 ENDIF(APPLE)
diff --git a/src/luxmarkapp.h b/src/luxmarkapp.h
index 78c9ab4..f3d568e 100644
--- a/src/luxmarkapp.h
+++ b/src/luxmarkapp.h
@@ -23,7 +23,7 @@
 #define _LUXMARKAPP_H
 
 #ifndef Q_MOC_RUN
-#include <QtGui/QApplication>
+#include <QApplication>
 #include <QTimer>
 
 #include <boost/thread.hpp>
diff --git a/src/main.cpp b/src/main.cpp
index 2ee5ae5..7a93275 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -27,7 +27,7 @@
 #include "luxmarkapp.h"
 
 static void PrintCmdLineHelp(const QString &cmd) {
-	cerr << "Usage: " << cmd.toAscii().data() << " [options]" << endl <<
+	cerr << "Usage: " << cmd.toLatin1().data() << " [options]" << endl <<
 			" --help (display this help and exit)" << endl <<
 			" --scene=LUXBALL_HDR|MICROPHONE|HOTEL (select the scene to use)" << endl <<
 			" --mode="
@@ -83,7 +83,7 @@ int main(int argc, char **argv) {
 			else if (scene.compare("HOTEL", Qt::CaseInsensitive) == 0)
 				scnName = SCENE_HOTEL;
 			else {
-				cerr << "Unknown scene name: " << argScene.cap(1).toAscii().data() << endl;
+				cerr << "Unknown scene name: " << argScene.cap(1).toLatin1().data() << endl;
 				PrintCmdLineHelp(argsList.at(0));
 				exit = true;
 				break;
@@ -109,7 +109,7 @@ int main(int argc, char **argv) {
 			else if (scene.compare("PAUSE", Qt::CaseInsensitive) == 0)
 				mode = PAUSE;
 			else {
-				cerr << "Unknown mode name: " << argMode.cap(1).toAscii().data() << endl;
+				cerr << "Unknown mode name: " << argMode.cap(1).toLatin1().data() << endl;
 				PrintCmdLineHelp(argsList.at(0));
 				exit = true;
 				break;
@@ -119,7 +119,7 @@ int main(int argc, char **argv) {
 		} else if (argSingleRunExtInfo.indexIn(argsList.at(i)) != -1 ) {   
 			singleRunExtInfo = true;
         } else {
-            cerr << "Unknown argument: " << argsList.at(i).toAscii().data() << endl;
+            cerr << "Unknown argument: " << argsList.at(i).toLatin1().data() << endl;
 			PrintCmdLineHelp(argsList.at(0));
 			exit = true;
 			break;
diff --git a/src/submitdialog.cpp b/src/submitdialog.cpp
index a688cd9..d929060 100644
--- a/src/submitdialog.cpp
+++ b/src/submitdialog.cpp
@@ -21,6 +21,7 @@
 
 #include <QDateTime>
 #include <QTextStream>
+#include <QUrlQuery>
 
 #include "luxrays/core/utils.h"
 
@@ -130,67 +131,67 @@ void SubmitDialog::genericButton() {
 		request.setHeader(QNetworkRequest::ContentTypeHeader, "application/x-www-form-urlencoded");
 
 		// Create the http request parameters
-		QUrl params;
-		params.addEncodedQueryItem("name", QUrl::toPercentEncoding(name));
-		params.addEncodedQueryItem("password", QUrl::toPercentEncoding(pwd));
+		QUrlQuery params;
+		params.addQueryItem("name", QUrl::toPercentEncoding(name));
+		params.addQueryItem("password", QUrl::toPercentEncoding(pwd));
 
 		SD_LOG("Submitted data:");
 
-		params.addEncodedQueryItem("version", QUrl::toPercentEncoding(version));
+		params.addQueryItem("version", QUrl::toPercentEncoding(version));
 		SD_LOG("version = " << version.toStdString());
 
-		params.addEncodedQueryItem("os", QUrl::toPercentEncoding(os));
+		params.addQueryItem("os", QUrl::toPercentEncoding(os));
 		SD_LOG("os = " << os.toStdString());
 
-		params.addEncodedQueryItem("mode", QUrl::toPercentEncoding(benchMode));
+		params.addQueryItem("mode", QUrl::toPercentEncoding(benchMode));
 		SD_LOG("mode = " << benchMode.toStdString());
 
-		params.addEncodedQueryItem("scene_name", QUrl::toPercentEncoding(scene));
+		params.addQueryItem("scene_name", QUrl::toPercentEncoding(scene));
 		SD_LOG("scene_name = " << scene.toStdString());
 
-		params.addEncodedQueryItem("score", QUrl::toPercentEncoding(score));
+		params.addQueryItem("score", QUrl::toPercentEncoding(score));
 		SD_LOG("score = " << score.toStdString());
 
-		params.addEncodedQueryItem("note", QUrl::toPercentEncoding(note));
+		params.addQueryItem("note", QUrl::toPercentEncoding(note));
 		SD_LOG("note = " << note.toStdString());
 
-		params.addEncodedQueryItem("dev_count", QUrl::toPercentEncoding(devCount));
+		params.addQueryItem("dev_count", QUrl::toPercentEncoding(devCount));
 		SD_LOG("dev_count = " << devCount.toStdString());
 
 		for (size_t i = 0; i < descs.size(); ++i) {
 			SD_LOG("dev_platform_name = " << descs[i].platformName);
-			params.addEncodedQueryItem("dev_platform_name[]", QUrl::toPercentEncoding(QString(descs[i].platformName.c_str())));
+			params.addQueryItem("dev_platform_name[]", QUrl::toPercentEncoding(QString(descs[i].platformName.c_str())));
 
 			SD_LOG("dev_platform_ver = " << descs[i].platformVersion);
-			params.addEncodedQueryItem("dev_platform_ver[]", QUrl::toPercentEncoding(QString(descs[i].platformVersion.c_str())));
+			params.addQueryItem("dev_platform_ver[]", QUrl::toPercentEncoding(QString(descs[i].platformVersion.c_str())));
 
 			SD_LOG("dev_name = " << descs[i].deviceName);
-			params.addEncodedQueryItem("dev_name[]", QUrl::toPercentEncoding(QString(descs[i].deviceName.c_str())));
+			params.addQueryItem("dev_name[]", QUrl::toPercentEncoding(QString(descs[i].deviceName.c_str())));
 
 			SD_LOG("dev_type = " << descs[i].deviceType);
-			params.addEncodedQueryItem("dev_type[]", QUrl::toPercentEncoding(QString(descs[i].deviceType.c_str())));
+			params.addQueryItem("dev_type[]", QUrl::toPercentEncoding(QString(descs[i].deviceType.c_str())));
 
 			SD_LOG("dev_units = " << descs[i].units);
-			params.addEncodedQueryItem("dev_units[]", QUrl::toPercentEncoding(QString(ToString(descs[i].units).c_str())));
+			params.addQueryItem("dev_units[]", QUrl::toPercentEncoding(QString(ToString(descs[i].units).c_str())));
 
 			SD_LOG("dev_clock = " << descs[i].clock);
-			params.addEncodedQueryItem("dev_clock[]", QUrl::toPercentEncoding(QString(ToString(descs[i].clock).c_str())));
+			params.addQueryItem("dev_clock[]", QUrl::toPercentEncoding(QString(ToString(descs[i].clock).c_str())));
 
 			SD_LOG("dev_native_float_vec_width = " << descs[i].nativeVectorWidthFloat);
-			params.addEncodedQueryItem("dev_native_float_vec_width[]", QUrl::toPercentEncoding(QString(ToString(descs[i].nativeVectorWidthFloat).c_str())));
+			params.addQueryItem("dev_native_float_vec_width[]", QUrl::toPercentEncoding(QString(ToString(descs[i].nativeVectorWidthFloat).c_str())));
 
 			SD_LOG("dev_global_mem = " << descs[i].globalMem);
-			params.addEncodedQueryItem("dev_global_mem[]", QUrl::toPercentEncoding(QString(ToString(descs[i].globalMem).c_str())));
+			params.addQueryItem("dev_global_mem[]", QUrl::toPercentEncoding(QString(ToString(descs[i].globalMem).c_str())));
 
 			SD_LOG("dev_local_mem = " << descs[i].localMem);
-			params.addEncodedQueryItem("dev_local_mem[]", QUrl::toPercentEncoding(QString(ToString(descs[i].localMem).c_str())));
+			params.addQueryItem("dev_local_mem[]", QUrl::toPercentEncoding(QString(ToString(descs[i].localMem).c_str())));
 
 			SD_LOG("dev_constant_mem = " << descs[i].constantMem);
-			params.addEncodedQueryItem("dev_constant_mem[]", QUrl::toPercentEncoding(QString(ToString(descs[i].constantMem).c_str())));
+			params.addQueryItem("dev_constant_mem[]", QUrl::toPercentEncoding(QString(ToString(descs[i].constantMem).c_str())));
 		}
 
 		QByteArray data;
-		data = params.encodedQuery();
+		data = params.query(QUrl::FullyEncoded).toLatin1();
 
 		// Send the request
 		SD_LOG("Posting result...");
