commit a28206191e31e835679a97da3289a9d993bbf249
Author: Thomas Debesse <dev@illwieckz.net>
Date:   Sun Oct 23 03:52:54 2022 +0200

    patch: luxmark3/luxmark3-embree-build-aarch64-with-sse2neon.patch
    
    This is based on works by marty1885 <marty188586@gmail.com>
    See https://github.com/marty1885/embree-arm

diff --git a/CMakeLists.txt b/CMakeLists.txt
index afa704d35..d5b54d86d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,12 @@
 ## limitations under the License.                                           ##
 ## ======================================================================== ##
 
+set(USE_CPU_ARCH "" CACHE STRING "Processor architecture")
+if("${USE_CPU_ARCH}" STREQUAL "aarch64")
+  set(EMBREE_MAX_ISA "SSE2")
+  add_definitions(-D__ARM_NEON__ -D__SSE__ -D__SSE2__ -D__X86_64__)
+endif()
+
 SET(EMBREE_VERSION_MAJOR 2)
 SET(EMBREE_VERSION_MINOR 17)
 SET(EMBREE_VERSION_PATCH 7)
diff --git a/common/cmake/clang.cmake b/common/cmake/clang.cmake
index d73dc6230..65671acc0 100644
--- a/common/cmake/clang.cmake
+++ b/common/cmake/clang.cmake
@@ -24,6 +24,10 @@ SET(FLAGS_AVX2  "-mf16c -mavx2 -mfma -mlzcnt -mbmi -mbmi2")
 SET(FLAGS_AVX512KNL "-march=knl")
 SET(FLAGS_AVX512SKX "-march=skx")
 
+if("${USE_CPU_ARCH}" STREQUAL "aarch64")
+set(FLAGS_SSE2 "")
+endif()
+
 IF (WIN32)
 
   SET(COMMON_CXX_FLAGS "")
diff --git a/common/cmake/gcc.cmake b/common/cmake/gcc.cmake
index be5f44a66..9c7cdccda 100644
--- a/common/cmake/gcc.cmake
+++ b/common/cmake/gcc.cmake
@@ -21,6 +21,10 @@ SET(FLAGS_AVX2  "-mf16c -mavx2 -mfma -mlzcnt -mbmi -mbmi2")
 SET(FLAGS_AVX512KNL "-mavx512f -mavx512pf -mavx512er -mavx512cd -mf16c -mavx2 -mfma -mlzcnt -mbmi -mbmi2")
 SET(FLAGS_AVX512SKX "-mavx512f -mavx512dq -mavx512cd -mavx512bw -mavx512vl -mf16c -mavx2 -mfma -mlzcnt -mbmi -mbmi2")
 
+if("${USE_CPU_ARCH}" STREQUAL "aarch64")
+set(FLAGS_SSE2 "")
+endif()
+
 OPTION(EMBREE_IGNORE_CMAKE_CXX_FLAGS "When enabled Embree ignores default CMAKE_CXX_FLAGS." ON)
 IF (EMBREE_IGNORE_CMAKE_CXX_FLAGS)
   SET(CMAKE_CXX_FLAGS "")
diff --git a/common/math/math.h b/common/math/math.h
index bd66796e7..ec647693c 100644
--- a/common/math/math.h
+++ b/common/math/math.h
@@ -21,9 +21,13 @@
 #include "constants.h"
 #include <cmath>
 
+#if defined(__ARM_NEON__)
+#include <sse2neon.h>
+#else
 #include <emmintrin.h>
 #include <xmmintrin.h>
 #include <immintrin.h>
+#endif
 
 #if defined(__WIN32__)
 #if (__MSV_VER <= 1700)
diff --git a/common/simd/varying.h b/common/simd/varying.h
index 4397a96c7..bba0d1b47 100644
--- a/common/simd/varying.h
+++ b/common/simd/varying.h
@@ -70,7 +70,9 @@ namespace embree
   template<int N> using vbool = vboolf<N>;
 
   /* Maximum supported varying size */
-#if defined(__AVX512F__)
+#if defined(__ARM_NEON__)
+  const int VSIZEX = 4;
+#elif defined(__AVX512F__)
   const int VSIZEX = 16;
 #elif defined(__AVX__)
   const int VSIZEX = 8;
diff --git a/common/sys/intrinsics.h b/common/sys/intrinsics.h
index d59a16e0e..acebdee33 100644
--- a/common/sys/intrinsics.h
+++ b/common/sys/intrinsics.h
@@ -22,7 +22,11 @@
 #include <intrin.h>
 #endif
 
+#if defined(__ARM_NEON__)
+#include <sse2neon.h>
+#else
 #include <immintrin.h>
+#endif
 
 #if defined(__BMI__) && defined(__GNUC__)
   #if !defined(_tzcnt_u32)
@@ -217,23 +221,42 @@ namespace embree
 #else
   
   __forceinline void __cpuid(int out[4], int op) {
+#if defined(__ARM_NEON__)
+    if(op == 0) // Get CPU name.
+    {
+      out[0] = 0x41524d20;
+      out[1] = 0x41524d20;
+      out[2] = 0x41524d20;
+      out[3] = 0x41524d20;
+    }
+#else
     asm volatile ("cpuid" : "=a"(out[0]), "=b"(out[1]), "=c"(out[2]), "=d"(out[3]) : "a"(op)); 
+#endif
   }
   
   __forceinline void __cpuid_count(int out[4], int op1, int op2) {
+#if defined(__ARM_NEON__)
+#else
     asm volatile ("cpuid" : "=a"(out[0]), "=b"(out[1]), "=c"(out[2]), "=d"(out[3]) : "a"(op1), "c"(op2)); 
+#endif
   }
   
 #endif
   
   __forceinline uint64_t read_tsc()  {
+#if defined(__ARM_NEON__)
+    return 0;
+#else
     uint32_t high,low;
     asm volatile ("rdtsc" : "=d"(high), "=a"(low));
     return (((uint64_t)high) << 32) + (uint64_t)low;
+#endif
   }
   
   __forceinline int __bsf(int v) {
-#if defined(__AVX2__) 
+#if defined(__ARM_NEON__)
+    return __builtin_ctz(v);
+#elif defined(__AVX2__) 
     return _tzcnt_u32(v);
 #else
     int r = 0; asm ("bsf %1,%0" : "=r"(r) : "r"(v)); return r;
@@ -243,7 +266,9 @@ namespace embree
 #if defined(__X86_64__)
   __forceinline unsigned __bsf(unsigned v) 
   {
-#if defined(__AVX2__) 
+#if defined(__ARM_NEON__)
+    return __builtin_ctz(v);
+#elif defined(__AVX2__) 
     return _tzcnt_u32(v);
 #else
     unsigned r = 0; asm ("bsf %1,%0" : "=r"(r) : "r"(v)); return r;
@@ -252,7 +277,9 @@ namespace embree
 #endif
   
   __forceinline size_t __bsf(size_t v) {
-#if defined(__AVX2__)
+#if defined(__ARM_NEON__)
+    return __builtin_ctzl(v);
+#elif defined(__AVX2__)
 #if defined(__X86_64__)
     return _tzcnt_u64(v);
 #else
@@ -287,7 +314,9 @@ namespace embree
   }
   
   __forceinline int __bsr(int v) {
-#if defined(__AVX2__) 
+#if defined(__ARM_NEON__)
+    return __builtin_clz(v)^31;
+#elif defined(__AVX2__) 
     return 31 - _lzcnt_u32(v);
 #else
     int r = 0; asm ("bsr %1,%0" : "=r"(r) : "r"(v)); return r;
@@ -296,7 +325,9 @@ namespace embree
   
 #if defined(__X86_64__)
   __forceinline unsigned __bsr(unsigned v) {
-#if defined(__AVX2__) 
+#if defined(__ARM_NEON__)
+    return __builtin_clz(v)^31;
+#elif defined(__AVX2__) 
     return 31 - _lzcnt_u32(v);
 #else
     unsigned r = 0; asm ("bsr %1,%0" : "=r"(r) : "r"(v)); return r;
@@ -305,7 +336,9 @@ namespace embree
 #endif
   
   __forceinline size_t __bsr(size_t v) {
-#if defined(__AVX2__)
+#if defined(__ARM_NEON__)
+    return sizeof(v)*8-1 - __builtin_clz(v);
+#elif defined(__AVX2__)
 #if defined(__X86_64__)
     return 63 - _lzcnt_u64(v);
 #else
@@ -343,27 +376,69 @@ namespace embree
   }
   
   __forceinline int __btc(int v, int i) {
+#if defined(__ARM_NEON__)
+    unsigned int mask = 1<<i;
+    int r = (v&mask)?0xffffffff:0;
+    v ^= mask;
+    return r;
+#else
     int r = 0; asm ("btc %1,%0" : "=r"(r) : "r"(i), "0"(v) : "flags" ); return r;
+#endif
   }
   
   __forceinline int __bts(int v, int i) {
+#if defined(__ARM_NEON__)
+    unsigned int mask = 1<<i;
+    int r = (v&mask)?0xffffffff:0;
+    v |= mask;
+    return r;
+#else
     int r = 0; asm ("bts %1,%0" : "=r"(r) : "r"(i), "0"(v) : "flags"); return r;
+#endif
   }
   
   __forceinline int __btr(int v, int i) {
+#if defined(__ARM_NEON__)
+    unsigned int mask = 1<<i;
+    int r = (v&mask)?0xffffffff:0;
+    v ^= ~mask;
+    return r;
+#else
     int r = 0; asm ("btr %1,%0" : "=r"(r) : "r"(i), "0"(v) : "flags"); return r;
+#endif
   }
   
   __forceinline size_t __btc(size_t v, size_t i) {
+#if defined(__ARM_NEON__)
+    size_t mask = 1<<i;
+    int r = (v&mask)?0xffffffff:0;
+    v ^= mask;
+    return r;
+#else
     size_t r = 0; asm ("btc %1,%0" : "=r"(r) : "r"(i), "0"(v) : "flags" ); return r;
+#endif
   }
   
   __forceinline size_t __bts(size_t v, size_t i) {
+#if defined(__ARM_NEON__)
+    size_t mask = 1<<i;
+    int r = (v&mask)?0xffffffff:0;
+    v |= mask;
+    return r;
+#else
     size_t r = 0; asm ("bts %1,%0" : "=r"(r) : "r"(i), "0"(v) : "flags"); return r;
+#endif
   }
   
   __forceinline size_t __btr(size_t v, size_t i) {
+#if defined(__ARM_NEON__)
+    size_t mask = 1<<i;
+    int r = (v&mask)?0xffffffff:0;
+    v &= ~mask;
+    return r; 
+#else
     size_t r = 0; asm ("btr %1,%0" : "=r"(r) : "r"(i), "0"(v) : "flags"); return r;
+#endif
   }
 
   __forceinline int32_t atomic_cmpxchg(int32_t volatile* value, int32_t comparand, const int32_t input) {
diff --git a/common/sys/sysinfo.cpp b/common/sys/sysinfo.cpp
index 3cac37027..cee8ea697 100644
--- a/common/sys/sysinfo.cpp
+++ b/common/sys/sysinfo.cpp
@@ -87,6 +87,9 @@ namespace embree
 
   std::string getCPUVendor()
   {
+#if defined(__ARM_NEON__)
+     return "ARM ARM ARM ";
+#else
     int cpuinfo[4]; 
     __cpuid (cpuinfo, 0); 
     int name[4];
@@ -95,10 +98,14 @@ namespace embree
     name[2] = cpuinfo[2];
     name[3] = 0;
     return (char*)name;
+#endif
   }
 
   CPUModel getCPUModel() 
   {
+#if defined(__ARM_NEON__)
+    return CPU_ARM;
+#else
     if (getCPUVendor() != "GenuineIntel")
       return CPU_UNKNOWN;
     
@@ -124,6 +131,7 @@ namespace embree
     if (model == 0x3C) return CPU_HASWELL;           // Haswell
     if (model == 0x55) return CPU_SKYLAKE_SERVER;   // Skylake server based CPUs
     return CPU_UNKNOWN;
+#endif
   }
 
   std::string stringOfCPUModel(CPUModel model)
@@ -183,6 +191,8 @@ namespace embree
   /* cpuid[eax=7,ecx=0].ecx */
   static const int CPU_FEATURE_BIT_AVX512VBMI = 1 << 1;   // AVX512VBMI (vector bit manipulation instructions)
 
+#if defined(__ARM_NEON__)
+#else
   __noinline int64_t get_xcr0() 
   {
 #if defined (__WIN32__)
@@ -195,9 +205,13 @@ namespace embree
     return xcr0;
 #endif
   }
+#endif
 
   int getCPUFeatures()
   {
+#if defined(__ARM_NEON__)
+    return CPU_FEATURE_SSE2|CPU_FEATURE_SSE;
+#else
     /* cache CPU features access */
     static int cpu_features = 0;
     if (cpu_features) 
@@ -269,6 +283,7 @@ namespace embree
       cpu_features &= ~CPU_FEATURE_PSEUDO_HIFREQ256BIT;
 
     return cpu_features;
+#endif
   }
 
   std::string stringOfCPUFeatures(int features)
diff --git a/common/sys/sysinfo.h b/common/sys/sysinfo.h
index bce6f6213..4fd1d0c00 100644
--- a/common/sys/sysinfo.h
+++ b/common/sys/sysinfo.h
@@ -72,7 +72,7 @@
 #  define isa sse
 #  define ISA SSE
 #  define ISA_STR "SSE"
-#else 
+#else
 #error Unknown ISA
 #endif
 
@@ -86,7 +86,8 @@ namespace embree
     CPU_CORE_SANDYBRIDGE,
     CPU_HASWELL,
     CPU_KNIGHTS_LANDING,
-    CPU_SKYLAKE_SERVER
+    CPU_SKYLAKE_SERVER,
+    CPU_ARM
   };
 
   /*! get the full path to the running executable */
@@ -134,7 +135,7 @@ namespace embree
   static const int CPU_FEATURE_AVX512VBMI = 1 << 24;
  
   static const int CPU_FEATURE_PSEUDO_HIFREQ256BIT = 1 << 30;
- 
+
   /*! get CPU features */
   int getCPUFeatures();
 
diff --git a/common/sys/thread.cpp b/common/sys/thread.cpp
index 04157b3b7..a3afdad6e 100644
--- a/common/sys/thread.cpp
+++ b/common/sys/thread.cpp
@@ -19,7 +19,12 @@
 #include "string.h"
 
 #include <iostream>
+
+#if defined(__ARM_NEON__)
+#include <sse2neon.h>
+#else
 #include <xmmintrin.h>
+#endif
 
 #if defined(PTHREADS_WIN32)
 #pragma comment (lib, "pthreadVC.lib")
diff --git a/kernels/builders/bvh_builder_hair.h b/kernels/builders/bvh_builder_hair.h
index 5c20d0713..d09896824 100644
--- a/kernels/builders/bvh_builder_hair.h
+++ b/kernels/builders/bvh_builder_hair.h
@@ -16,6 +16,10 @@
 
 #pragma once
 
+#if defined(__ARM_NEON__)
+#define _mm_mfence _mm_sfence
+#endif
+
 #include "../bvh/bvh.h"
 #include "../geometry/primitive.h"
 #include "../builders/bvh_builder_sah.h"
diff --git a/kernels/builders/bvh_builder_morton.h b/kernels/builders/bvh_builder_morton.h
index 62a9143c8..2fefd5713 100644
--- a/kernels/builders/bvh_builder_morton.h
+++ b/kernels/builders/bvh_builder_morton.h
@@ -16,6 +16,10 @@
 
 #pragma once
 
+#if defined(__ARM_NEON__)
+#define _mm_mfence _mm_sfence
+#endif
+
 #include "../common/builder.h"
 #include "../../common/algorithms/parallel_reduce.h"
 
diff --git a/kernels/builders/bvh_builder_msmblur.h b/kernels/builders/bvh_builder_msmblur.h
index 08913cf87..91b463ae0 100644
--- a/kernels/builders/bvh_builder_msmblur.h
+++ b/kernels/builders/bvh_builder_msmblur.h
@@ -16,6 +16,10 @@
 
 #pragma once
 
+#if defined(__ARM_NEON__)
+#define _mm_mfence _mm_sfence
+#endif
+
 #define MBLUR_NUM_TEMPORAL_BINS 2
 #define MBLUR_NUM_OBJECT_BINS   32
 
diff --git a/kernels/builders/bvh_builder_msmblur_hair.h b/kernels/builders/bvh_builder_msmblur_hair.h
index 5e8465286..7149f4575 100644
--- a/kernels/builders/bvh_builder_msmblur_hair.h
+++ b/kernels/builders/bvh_builder_msmblur_hair.h
@@ -16,6 +16,10 @@
 
 #pragma once
 
+#if defined(__ARM_NEON__)
+#define _mm_mfence _mm_sfence
+#endif
+
 #include "../bvh/bvh.h"
 #include "../geometry/primitive.h"
 #include "../builders/bvh_builder_msmblur.h"
diff --git a/kernels/builders/bvh_builder_sah.h b/kernels/builders/bvh_builder_sah.h
index 307d78c9b..c73b195b6 100644
--- a/kernels/builders/bvh_builder_sah.h
+++ b/kernels/builders/bvh_builder_sah.h
@@ -16,6 +16,10 @@
 
 #pragma once
 
+#if defined(__ARM_NEON__)
+#define _mm_mfence _mm_sfence
+#endif
+
 #include "heuristic_binning_array_aligned.h"
 #include "heuristic_spatial_array.h"
 #include "heuristic_openmerge_array.h"
diff --git a/kernels/common/device.cpp b/kernels/common/device.cpp
index bbda36b8f..e646aaf7c 100644
--- a/kernels/common/device.cpp
+++ b/kernels/common/device.cpp
@@ -80,6 +80,8 @@ namespace embree
     /*! enable some floating point exceptions to catch bugs */
     if (State::float_exceptions)
     {
+#if defined(__ARM_NEON__)
+#else
       int exceptions = _MM_MASK_MASK;
       //exceptions &= ~_MM_MASK_INVALID;
       exceptions &= ~_MM_MASK_DENORM;
@@ -88,6 +90,7 @@ namespace embree
       //exceptions &= ~_MM_MASK_UNDERFLOW;
       //exceptions &= ~_MM_MASK_INEXACT;
       _MM_SET_EXCEPTION_MASK(exceptions);
+#endif
     }
 
     /* print info header */
