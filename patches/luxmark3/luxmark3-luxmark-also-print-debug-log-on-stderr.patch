commit ee6e8aee5d5d52dad930d34c20d6fe6fa9c60b1a
Author: Thomas Debesse <dev@illwieckz.net>
Date:   Fri Oct 21 18:22:16 2022 +0200

    patch: luxmark3/luxmark3-luxmark-also-print-debug-log-on-stderr.patch

diff --git a/src/luxmarkapp.cpp b/src/luxmarkapp.cpp
index dbaefde..ceac3d1 100644
--- a/src/luxmarkapp.cpp
+++ b/src/luxmarkapp.cpp
@@ -110,16 +110,23 @@ LuxMarkApp::~LuxMarkApp() {
 
 void LuxMarkApp::Init(LuxMarkAppMode mode, const char *scnName,
 		const bool single, const bool extInfo) {
+	std::string luxmark_name_version = "LuxMark v" LUXMARK_VERSION_MAJOR "." LUXMARK_VERSION_MINOR;
+	std::string luxcore_name_version = "LuxCore v" LUXCORE_VERSION_MAJOR "." LUXCORE_VERSION_MINOR;
+
 	mainWin = new MainWindow();
-	mainWin->setWindowTitle("LuxMark v" LUXMARK_VERSION_MAJOR "." LUXMARK_VERSION_MINOR);
+	mainWin->setWindowTitle(luxmark_name_version.c_str());
 	mainWin->show();
 	mainWin->SetLuxApp(this);
 	LogWindow = mainWin;
 	singleRun = single;
 	singleRunExtInfo = extInfo;
 
-	LM_LOG("<FONT COLOR=\"#0000ff\">LuxMark v" << LUXMARK_VERSION_MAJOR << "." << LUXMARK_VERSION_MINOR << "</FONT>");
-	LM_LOG("Based on <FONT COLOR=\"#0000ff\">LuxCore v" << LUXCORE_VERSION_MAJOR << "." << LUXCORE_VERSION_MINOR << "</FONT>");
+	LM_STDERR(luxmark_name_version);
+	LM_LOG_WITHOUT_STDERR("<FONT COLOR=\"#0000ff\">" << luxmark_name_version << "</FONT>");
+
+	std::string sentence = "Based on ";
+	LM_STDERR(sentence << luxcore_name_version);
+	LM_LOG_WITHOUT_STDERR(sentence << "<FONT COLOR=\"#0000ff\">" << luxcore_name_version << "</FONT>");
 
 	// Initialize hardware information
 	hardwareTreeModel = new HardwareTreeModel(mainWin);
@@ -151,7 +158,9 @@ void  LuxMarkApp::SetOpenCLCompilerOpts(const OCLCompilerOpts opt, const bool en
 			oclOptNoSignedZeros = enable;
 			break;
 		default:
-			LM_LOG("<FONT COLOR=\"#ff0000\">Unknown OpenCL compiler option in LuxMarkApp::SetOpenCLCompilerOpts(): " << opt << "</FONT>");
+			std::string sentence = "Unknown OpenCL compiler option in LuxMarkApp::SetOpenCLCompilerOpts(): ";
+			LM_STDERR(sentence << opt);
+			LM_LOG_WITHOUT_STDERR("<FONT COLOR=\"#ff0000\">" << sentence << opt << "</FONT>");
 			break;
 	}
 }
@@ -343,7 +352,9 @@ void LuxMarkApp::RenderRefreshTimeout() {
 		case BENCHMARK_NATIVE:
 			break;
 		default:
-			LM_LOG("<FONT COLOR=\"#ff0000\">Unknown render mode in LuxMarkApp::RenderRefreshTimeout(): " << mode << "</FONT>");
+			std::string sentence = "Unknown render mode in LuxMarkApp::RenderRefreshTimeout(): ";
+			LM_STDERR(sentence << mode << "</FONT>");
+			LM_LOG_WITHOUT_STDERR("<FONT COLOR=\"#ff0000\">" << sentence << mode << "</FONT>");
 			break;
 	}
 
diff --git a/src/mainwindow.h b/src/mainwindow.h
index e15fe72..9abf6a7 100644
--- a/src/mainwindow.h
+++ b/src/mainwindow.h
@@ -136,11 +136,41 @@ private:
 	QString message;
 };
 
-#define LM_LOG(a) { if (LogWindow) { std::stringstream _LM_LOG_LOCAL_SS; _LM_LOG_LOCAL_SS << a; qApp->postEvent(LogWindow, new LuxLogEvent(QString(_LM_LOG_LOCAL_SS.str().c_str()))); }}
-#define LM_LOG_LUXRAYS(a) { LM_LOG("<FONT COLOR=\"#002200\"><B>[LuxRays]</B></FONT> " << a); }
-#define LM_LOG_SDL(a) { LM_LOG("<FONT COLOR=\"#005500\"><B>[SDL]</B></FONT> " << a); }
-#define LM_LOG_LUXCORE(a) { LM_LOG("<FONT COLOR=\"#009900\"><B>[LuxCore]</B></FONT> " << a); }
-
-#define LM_ERROR(a) { if (LogWindow) { std::stringstream _LM_ERR_LOCAL_SS; _LM_ERR_LOCAL_SS << a; qApp->postEvent(LogWindow, new LuxErrorEvent(QString(_LM_ERR_LOCAL_SS.str().c_str()))); }}
+#define LM_STDERR(a) std::cerr << a << "\n"
+
+#define LM_LOG_WITHOUT_STDERR(a) { \
+	if (LogWindow) { \
+		std::stringstream _LM_LOG_LOCAL_SS; \
+		_LM_LOG_LOCAL_SS << a; \
+		qApp->postEvent(LogWindow, new LuxLogEvent(QString(_LM_LOG_LOCAL_SS.str().c_str()))); \
+	} \
+}
+
+#define LM_LOG(a) { \
+	LM_STDERR(a); LM_LOG_WITHOUT_STDERR(a); \
+}
+
+#define LM_LOG_LUXRAYS(a) { \
+	LM_STDERR( "[LuxRays] " << a ); \
+	LM_LOG_WITHOUT_STDERR("<FONT COLOR=\"#002200\"><B>[LuxRays]</B></FONT> " << a);\
+}
+
+#define LM_LOG_SDL(a) { \
+	LM_STDERR( "[SDL] " << a ); \
+	LM_LOG_WITHOUT_STDERR("<FONT COLOR=\"#005500\"><B>[SDL]</B></FONT> " << a); \
+}
+
+#define LM_LOG_LUXCORE(a) { \
+	LM_STDERR( "[LuxCore] " << a ); \
+	LM_LOG_WITHOUT_STDERR("<FONT COLOR=\"#009900\"><B>[LuxCore]</B></FONT> " << a); \
+}
+
+#define LM_ERROR(a) { \
+	LM_STDERR( a ); \
+	if (LogWindow) { \
+		std::stringstream _LM_ERR_LOCAL_SS; _LM_ERR_LOCAL_SS << a; \
+		qApp->postEvent(LogWindow, new LuxErrorEvent(QString(_LM_ERR_LOCAL_SS.str().c_str()))); \
+	} \
+}
 
 #endif	/* _MAINWINDOW_H */
diff --git a/src/submitdialog.cpp b/src/submitdialog.cpp
index d929060..2350cd4 100644
--- a/src/submitdialog.cpp
+++ b/src/submitdialog.cpp
@@ -30,9 +30,23 @@
 
 using namespace luxrays;
 
-#define SD_MSG(a) { std::stringstream _SD_LOG_LOCAL_SS; _SD_LOG_LOCAL_SS << a;  ProgessMessage(QString(_SD_LOG_LOCAL_SS.str().c_str())); }
-#define SD_LOG(a) { SD_MSG("<FONT COLOR=\"#0000ff\">" << a << "</FONT>"); }
-#define SD_LOG_ERROR(a) { SD_MSG("<FONT COLOR=\"#ff0000\">" << a << "</FONT>"); }
+#define SD_STDERR( a ) std::cerr << a << "\n"
+
+#define SD_MSG(a) { \
+	std::stringstream _SD_LOG_LOCAL_SS; \
+	_SD_LOG_LOCAL_SS << a; \
+	ProgessMessage(QString(_SD_LOG_LOCAL_SS.str().c_str())); \
+}
+
+#define SD_LOG(a) { \
+	SD_STDERR( a) ; \
+	SD_MSG("<FONT COLOR=\"#0000ff\">" << a << "</FONT>"); \
+}
+
+#define SD_LOG_ERROR(a) { \
+	SD_STDERR( a) ; \
+	SD_MSG("<FONT COLOR=\"#ff0000\">" << a << "</FONT>"); \
+}
 
 SubmitDialog::SubmitDialog(
         const LuxMarkAppMode m,
